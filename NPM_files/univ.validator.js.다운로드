// ------------------------------------------------------------------------------------------------
// - 폼체크 기능 (written by luckshim)
// ------------------------------------------------------------------------------------------------
/**
validator.checkIsNumber("ctbCoCd", "CoCd 를 입력해 주세요1.", true);
validator.checkBetweenNum("ctbCoCd", 1, 3, "1-3 사이의 글을 입력해주세요", true);
validator.checkContains("ctbGLAct", "test", "test 라는 글자는 금칙어입니다.", true);
validator.checkSelected("ddlCtye", 1, "두번째부터 선택하세요.", true);
validator.checkWhiteSpace("ctbCoCd", "공백을 입력하시면 안됩니다.", true);
validator.checkMaxLength("ctbCoCd", 5, "5자 초과하면 안됩니다.", true);
validator.checkMinLength("ctbCoCd", 5, "5자 미만이면 안됩니다.", true);
validator.checkBetweenLength("ctbCoCd", 1,5, "1~5자 이내여야 합니다.", true);
*/

/**
* 폼체크 클래스 - checkForm 없을 경우 id로 체크함 - alertFunc 없을 경우 alert() 경고창
* 
* @param {form object} checkForm 체크할 폼
* @param {function object} alertFunc 경고창을 표시할 함수
*/
Validator = function (checkForm, alertFunc) {
    this.checkForm = checkForm;
    this.validateObjectArray = new Array();
    this.alertFunc = alertFunc;  // 경고창 함수
}

/**
* 유효성 객체
* 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.ValidateObject = function (identifier, errorMessage, focusFlag) {
    this.identifier = identifier;
    this.errorMessage = errorMessage;
    this.focusFlag = focusFlag;
}

/**
* id 또는 name으로 엘리먼트 객체를 획득
* 
* @param {string} identifier id 또는 name
* @return {element object} 엘리먼트 객체
*/
Validator.prototype.getElement = function (identifier) {
    if (this.checkForm && this.checkForm.nodeName == "FORM") {
        return this.checkForm[identifier];
    } else {
        return document.getElementById(identifier);
    }
}

/**
* 유효성 검사
* 
* @return {boolean} 유효성 검사결과
*/
Validator.prototype.validate = function () {
    for (var i = 0; i < this.validateObjectArray.length; i++) {
        var validateObject = this.validateObjectArray[i];
        if (!validateObject.validate()) {
            if (this.alertFunc) this.alertFunc(validateObject.errorMessage);
            else alert(validateObject.errorMessage);
            if (validateObject.focusFlag) {
                this.getElement(validateObject.identifier).focus();
            }
            this.validateObjectArray = new Array();
            return false;
        }
    }
    this.validateObjectArray = new Array();
    return true;
}

/**
* 값을 입력했는지의 여부를 검사
* 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkRequired = function (identifier, errorMessage, focusFlag) {
    var checkElement = $("#" + identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, focusFlag);
    validateObject.validate = function () {
        return (checkElement.val()).replace(/^\s*/, "").replace(/\s*$/, "") != "";
    }
    this.validateObjectArray.push(validateObject);
}

/**
* 값의 길이가 maxLength보다 작거나 같은지 검사
* 
* @param {string} identifier id 또는 name
* @param {int} maxLength 체크값
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkMaxLength = function (identifier, maxLength, errorMessage, focusFlag) {
    var checkElement = $("#" + identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, focusFlag);
    validateObject.validate = function () {
        var stringValue = checkElement.val();
        //alert("callme " + stringValue.length <= maxLength);
        return (stringValue.length <= maxLength);
    }
    this.validateObjectArray.push(validateObject);
}

/**
* 값의 길이가 minLength보다 크거나 같은지 검사
* 
* @param {string} identifier id 또는 name
* @param {int} minLength 체크값
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkMinLength = function (identifier, minLength, errorMessage, focusFlag) {
    var checkElement = $("#" + identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, focusFlag);
    validateObject.validate = function () {
        var stringValue = checkElement.val();
        return (minLength <= stringValue.length);
    }
    this.validateObjectArray.push(validateObject);
}

/**
* 값의 길이가 minLength와 maxLength사이에 있는지 검사
* 
* @param {string} identifier id 또는 name
* @param {int} minLength 체크값
* @param {int} maxLength 체크값
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkBetweenLength = function (identifier, minLength, maxLength, errorMessage, focusFlag) {
    var checkElement = $("#" + identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, focusFlag);
    validateObject.validate = function () {
        var stringValue = checkElement.val();
        return (minLength <= stringValue.length && stringValue.length <= maxLength);
    }
    this.validateObjectArray.push(validateObject);
}

/**
* 값의 바이트 길이가 maxLength보다 작거나 같은지 검사
* 
* @param {string} identifier id 또는 name
* @param {int} maxLength 체크값
* @param {int} kbyte 한글바이트수
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkMaxLengthByte = function (identifier, maxLength, kbyte, errorMessage, focusFlag) {
    var checkElement = $("#" + identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, focusFlag);
    validateObject.validate = function () {
        var stringValue = checkElement.val();
        var nbytes = 0;
        for (i = 0; i < stringValue.length; i++) {
            var ch = stringValue.charAt(i);
            if (escape(ch).length > 4) {
                nbytes += kbyte;
            } else if (ch == '\n') {
                if (stringValue.charAt(i - 1) != '\r') {
                    nbytes += 1;
                }
            } else if (ch == '<' || ch == '>') {
                nbytes += 4;
            } else {
                nbytes += 1;
            }
        }
        return (nbytes <= maxLength);
    }
    this.validateObjectArray.push(validateObject);
}

/**
* 값의 바이트 길이가 minLength보다 작거나 같은지 검사
* 
* @param {string} identifier id 또는 name
* @param {int} minLength 체크값
* @param {int} kbyte 한글바이트수
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkMinLengthByte = function (identifier, minLength, kbyte, errorMessage, focusFlag) {
    var checkElement = $("#" + identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, focusFlag);
    validateObject.validate = function () {
        var stringValue = checkElement.val();
        var nbytes = 0;
        for (i = 0; i < stringValue.length; i++) {
            var ch = stringValue.charAt(i);
            if (escape(ch).length > 4) {
                nbytes += kbyte;
            } else if (ch == '\n') {
                if (stringValue.charAt(i - 1) != '\r') {
                    nbytes += 1;
                }
            } else if (ch == '<' || ch == '>') {
                nbytes += 4;
            } else {
                nbytes += 1;
            }
        }
        return (nbytes >= minLength);
    }
    this.validateObjectArray.push(validateObject);
}

/**
* 값의 바이트 길이가 minLength와 maxLength사이에 있는지 검사
* 
* @param {string} identifier id 또는 name
* @param {int} minLength 체크값
* @param {int} maxLength 체크값
* @param {int} kbyte 한글바이트수
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkBetweenLengthByte = function (identifier, minLength, maxLength, kbyte, errorMessage, focusFlag) {
    var checkElement = $("#" + identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, focusFlag);
    validateObject.validate = function () {
        var stringValue = checkElement.val();
        var nbytes = 0;
        for (i = 0; i < stringValue.length; i++) {
            var ch = stringValue.charAt(i);
            if (escape(ch).length > 4) {
                nbytes += kbyte;
            } else if (ch == '\n') {
                if (stringValue.charAt(i - 1) != '\r') {
                    nbytes += 1;
                }
            } else if (ch == '<' || ch == '>') {
                nbytes += 4;
            } else {
                nbytes += 1;
            }
        }
        return (minLength <= nbytes && nbytes <= maxLength);
    }
    this.validateObjectArray.push(validateObject);
}

/**
* 값이 정규표현식에 해당하는 지 검사
* 
* @param {string} identifier id 또는 name
* @param {string} regex 정규표현식
* @param {boolean} includeFlag 정규표현식 해당여부 포함되어야할때 true
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkRegex = function (identifier, regex, includeFlag, errorMessage, focusFlag) {
    var checkElement = $("#" + identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, focusFlag);
    validateObject.validate = function () {
        var str = checkElement.val();
        if (str.length == 0) return true;
        if (includeFlag) return str.search(regex) != -1;
        else return str.search(regex) == -1;
    }
    this.validateObjectArray.push(validateObject);
}

/**
* 값이 알파벳과 0~9사이의 숫자만 포함하는 지 검사
* 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkAlphaNum = function (identifier, errorMessage, focusFlag) {
    this.checkRegex(identifier, /^[a-zA-Z0-9]+$/, true, errorMessage, focusFlag);
}

/**
* 값이 0~9 사이의 문자만 포함하는 지 검사
* 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkOnlyNumber = function (identifier, errorMessage, focusFlag) {
    this.checkRegex(identifier, /^[0-9]+$/, true, errorMessage, focusFlag);
}

/**
* 영대소문자만 입력인지 검사
* 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkOnlyAlpabat = function (identifier, errorMessage, focusFlag) {
    this.checkRegex(identifier, /^[A-za-z]+$/, true, errorMessage, focusFlag);
}

/**
* 값이 올바른 이메일 주소인지 검사
* 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkEmail = function (identifier, errorMessage, focusFlag) {
    this.checkRegex(identifier, /^((\w|[\-\.])+)@((\w|[\-\.])+)\.([A-Za-z]+)$/, true, errorMessage, focusFlag);
}

/**
* 올바른 주소인지 검사
* 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkUrl = function (identifier, errorMessage, focusFlag) {
    this.checkRegex(identifier, /^(?:(?:ftp|https?):\/\/)?(?:[a-z0-9](?:[-a-z0-9]*[a-z0-9])?\.)+(?:com|edu|biz|org|gov|int|info|mil|net|name|museum|coop|aero|[a-z][a-z])\b(?:\d+)?(?:\/[^;"'<>()\[\]{}\s\x7f-\xff]*(?:[.,?]+[^;"'<>()\[\]{}\s\x7f-\xff]+)*)?/, true, errorMessage, focusFlag);
}

/**
* 특수문자 검사
* 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkSpecialChar = function (identifier, errorMessage, focusFlag) {
    this.checkRegex(identifier, /[~!@\#$%^&*\()\-=+_']/, false, errorMessage, focusFlag);
}

/**
* 공백 검사
* 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkWhiteSpace = function (identifier, errorMessage, focusFlag) {
    this.checkRegex(identifier, /\s/g, false, errorMessage, focusFlag);
}

/**
* <select>에서 선택한 옵션의 인덱스가 firstIdx보다 크거나 같은 지 검사한다.
* 
* @param {string} identifier id 또는 name
* @param {int} firstIdx 옵션인덱스
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkSelected = function (identifier, firstIdx, errorMessage, focusFlag) {
    var checkElement = this.getElement(identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, focusFlag);
    validateObject.validate = function () {
        var idx = checkElement.selectedIndex;
        return idx >= firstIdx;
    }
    this.validateObjectArray.push(validateObject);
}

/**
* checkbox나 radio 입력 요소가 최소한 1개 이상 선택됐는지 검사
* 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkAtLeastOneChecked = function (identifier, errorMessage, focusFlag) {
    var validateObject = new this.ValidateObject(null, errorMessage, false);
    validateObject.validate = function () {
        var ele = document.getElementsByName(identifier);
        for (var idxe = 0; idxe < ele.length; idxe++) {
            if (ele[idxe].checked == true) return true;
        }
        return false;
    }
    this.validateObjectArray.push(validateObject);
}

/**
* checkboxlist 입력 요소가 1개 이상 선택됐는지 검사
* 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkboxListChecked = function (identifier, errorMessage, focusFlag) {

    var validateObject = new this.ValidateObject(null, errorMessage, false);
    validateObject.validate = function () {
        var res = $("[id^=" + identifier + "]:checkbox:checked").length > 0;
        return res;
    }
    this.validateObjectArray.push(validateObject);
}

/**
* 특정 문자열이 포함되었는지 검사
* 
* @param {string} identifier id 또는 name
* @param {string} checkContainText 포함 문자열
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkContains = function (identifier, checkContainText, errorMessage, focusFlag) {
    var checkElement = $("#" + identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, false);
    validateObject.validate = function () {
        return checkElement.val().indexOf(checkContainText) == -1;
    }
    this.validateObjectArray.push(validateObject);
}

/**
* 입력된 숫자가 지정된 범위의 숫자인지 체크
* 
* @param {string} identifier id 또는 name
* @param {int} minNum 지정 최소 수
* @param {int} maxNum 지정 최대 수
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkBetweenNum = function (identifier, minNum, maxNum, errorMessage, focusFlag) {
    var checkElement = $("#" + identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, false);
    validateObject.validate = function () {
        var number = checkElement.val();
        return (number >= minNum && number <= maxNum);
    }
    this.validateObjectArray.push(validateObject);
}

/**
* isNaN 함수로 숫자여부 체크
* 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkIsNumber = function (identifier, errorMessage, focusFlag) {
    var checkElement = $("#" + identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, false);
    validateObject.validate = function () {
        var val = checkElement.val();
        return !isNaN(val);
    }
    this.validateObjectArray.push(validateObject);
}

/**
* 콤마(,)를 제거후 isNaN 함수로 금액여부 체크
* 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkIsMoney = function (identifier, errorMessage, focusFlag) {
    var checkElement = $("#" + identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, false);
    validateObject.validate = function () {
        var val = checkElement.val().replace(/,/g, "");
        return !isNaN(val);
    }
    this.validateObjectArray.push(validateObject);
}

/**
* <select>에서 선택한 옵션의 값을 확인한다.
* 
* @param {string} identifier id 또는 name
* @param {int} firstIdx 옵션인덱스
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkSelectedValue = function (identifier, defaultValue, errorMessage, focusFlag) {
    var checkElement = this.getElement(identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, focusFlag);
    validateObject.validate = function () {
        var nowSelectedValue = $(checkElement).val();
        return (nowSelectedValue == defaultValue ? false : true)
    }
    this.validateObjectArray.push(validateObject);
}


/**
* 주민번호의 유효성을 검사한다.
* 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkRes = function (identifier, errorMessage, focusFlag) {
    var checkElement = $("#" + identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, focusFlag);
    validateObject.validate = function () {
        var ssn = checkElement.val();
        ssn = ssn.replace(/-/g, "");

        var sum = 0;
        var month = ssn.substr(2, 2);
        var day = ssn.substr(4, 2);

        if (ssn.length != 13) {
            return false;
        }

        if (ssn.substr(7, 5) == "00000") {
            return false;
        }

        var checkBit = new Array(2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5);
        var num7 = ssn.charAt(6);
        var num13 = ssn.charAt(12);
        var total = 0;
        if (ssn.length == 13) {
            for (i = 0; i < checkBit.length; i++) { // 주민번호 12자리를 키값을 곱하여 합산한다.
                total += ssn.charAt(i) * checkBit[i];
            }
            // 외국인 구분 체크
            if (num7 == 0 || num7 == 9) { // 내국인 ( 1800년대 9: 남자, 0:여자)
                total = (11 - (total % 11)) % 10;
            }
            else if (num7 > 4) {  // 외국인 ( 1900년대 5:남자 6:여자  2000년대 7:남자, 8:여자)
                total = (13 - (total % 11)) % 10;
            }
            else { // 내국인 ( 1900년대 1:남자 2:여자  2000년대 3:남자, 4:여자)
                total = (11 - (total % 11)) % 10;
            }

            if (total != num13) {
                return false;
            }
            return true;
        } else {
            return false;
        }
    }
    this.validateObjectArray.push(validateObject);
}



/**
* 사업자등록번호의 유효성을 검사한다.
* 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkCompanyNumber = function (identifier, errorMessage, focusFlag) {
    var checkElement = $("#" + identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, focusFlag);
    validateObject.validate = function () {

        var compNo = checkElement.val().replace(/-/g, "");

        if (compNo == "9999999999" || compNo == "8888888888") { //해외거래처, 개인사업자
            return true;
        }

        var sum = 0;
        var getlist = new Array(10);
        var chkvalue = new Array("1", "3", "7", "1", "3", "7", "1", "3", "5");
        for (var i = 0; i < 10; i++) { getlist[i] = compNo.substring(i, i + 1); }
        for (var i = 0; i < 9; i++) { sum += getlist[i] * chkvalue[i]; }
        sum = sum + parseInt((getlist[8] * 5) / 10);
        sidliy = sum % 10;
        sidchk = 0;
        if (sidliy != 0) { sidchk = 10 - sidliy; }
        else { sidchk = 0; }
        if (sidchk != getlist[9]) { return false; }
        return true;
    }
    this.validateObjectArray.push(validateObject);
}




/**
* ()를 제외한 특수문자 금지 
* @param {string} identifier id 또는 name
* @param {string} errorMessage 에러메시지
* @param {boolean} focusFlag 포커스여부
*/
Validator.prototype.checkSpecialCharNotIncParenthesis = function (identifier, errorMessage, focusFlag) {
    var checkElement = $("#" + identifier);
    var validateObject = new this.ValidateObject(identifier, errorMessage, focusFlag);
    validateObject.validate = function () {

        var regexp = /[0-9a-zA-Zㄱ-ㅎ|ㅏ-ㅣ|가-힣()-＆]/;
        var text = checkElement.val();

        var b = true;
        for (var i = 0 ; i < text.length; i++) {
            if (text.charAt(i) != " " && regexp.test(text.charAt(i)) == false) {
                b = false;
                break;
            }
        }
        return b;
    }
    this.validateObjectArray.push(validateObject);

}